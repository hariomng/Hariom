type Query {
  getAllTasks(first: Int, after: String, last: Int, before: String): TaskConnection
  getTaskById(id: Int!): Task
}

type Mutation {
  createTask(input: CreateTaskInput!): Task!
  updateTaskStatus(input: UpdateTaskStatusInput!): Task
  deleteTask(id: Int!): Boolean!
}

type Subscription {
  taskCreated: Task!
  taskUpdated: Task!
  taskDeleted: Int!
}

type Task {
  id: Int!
  title: String!
  description: String
  status: TaskStatus!
  createdAt: String!
  updatedAt: String
}

enum TaskStatus {
  PENDING
  COMPLETED
}

input CreateTaskInput {
  title: String!
  description: String
}

input UpdateTaskStatusInput {
  id: Int!
  status: TaskStatus!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
